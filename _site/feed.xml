<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-30T21:18:48-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Charles Zhu‚Äôs page</title><entry><title type="html">Logic and Complexity</title><link href="http://localhost:4000/2025/07/24/logic-and-complexity.html" rel="alternate" type="text/html" title="Logic and Complexity" /><published>2025-07-24T16:00:02-04:00</published><updated>2025-07-24T16:00:02-04:00</updated><id>http://localhost:4000/2025/07/24/logic-and-complexity</id><content type="html" xml:base="http://localhost:4000/2025/07/24/logic-and-complexity.html"><![CDATA[<p>Descriptive complexity relates the realms of logic and complexity
theory.</p>
<p>Fagin's theorem<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a> states the following:</p>
<blockquote>
<p>A class
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>ùíû</mi><annotation encoding="application/x-tex">\mathcal{C}</annotation></semantics></math>
of finite structures is definable by a sentence of <a
href="https://plato.stanford.edu/entries/logic-if/supplement.html">existential
second-order logic</a> if and only if it is decidable by a
<em>non-deterministic machine</em> running in <em>polynomial
time</em>.</p>
<p>i.e.
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>ùñ§</mi><mi>ùñ≤</mi><mi>ùñÆ</mi></mrow><mo>=</mo><mrow><mi>ùñ≠</mi><mi>ùñØ</mi></mrow></mrow><annotation encoding="application/x-tex">\mathsf{ESO} = \mathsf{NP}</annotation></semantics></math></p>
</blockquote>
<p>In other words, a problem lies in <a
href="https://en.wikipedia.org/wiki/NP_(complexity)#Formal_definition">NP</a>
iff it can be described by a formula with a pattern in
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>E</mi><mi>i</mi><mo>*</mo></msubsup><mo stretchy="false" form="prefix">(</mo><mi>a</mi><mi>e</mi><msup><mo stretchy="false" form="postfix">)</mo><mo>*</mo></msup></mrow><annotation encoding="application/x-tex">E_i^* (ae)^*</annotation></semantics></math>
(<a
href="https://www-sop.inria.fr/members/Martin.Avanzini/teaching/2021/AL/slides/w2.pdf">monadic
existential second-order formula</a>) for some arity
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>i</mi><annotation encoding="application/x-tex">i</annotation></semantics></math><a
href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>.</p>
<p>The <a
href="https://en.wikipedia.org/wiki/B%C3%BCchi%E2%80%93Elgot%E2%80%93Trakhtenbrot_theorem">B√ºchi-Elgot-Trakhtenbrot
theorem</a><a href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"><sup>3</sup></a> establishes that</p>
<blockquote>
<p>A <a
href="https://en.wikipedia.org/wiki/Formal_language">language</a> (set
of words)
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mi>L</mi><annotation encoding="application/x-tex">L</annotation></semantics></math>
is <a href="https://en.wikipedia.org/wiki/Regular_language">regular</a>
if and only if it is definable in <a
href="https://en.wikipedia.org/wiki/Monadic_second-order_logic">monadic
second-order logic</a> (i.e. the set of its structures
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>K</mi><mi>L</mi></msub><annotation encoding="application/x-tex">K_L</annotation></semantics></math>
is definable in
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>S</mi><mi>O</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">MSOL</annotation></semantics></math>).</p>
</blockquote>
<p>(note a formal language defines a <a
href="https://en.wikipedia.org/wiki/Decision_problem">decision
problem</a> over satisfiability of inputs)</p>
<p>The <a
href="https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem">Cook-Levin
theorem</a> states that boolean satisfiability (<a
href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">SAT</a>)
is <a
href="https://en.wikipedia.org/wiki/NP-completeness">NP-complete</a>.</p>
<h2 id="references">References</h2>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<!-- <hr /> -->
<ol>
<li id="fn1"><p>N. Immerman, ‚ÄúSecond-Order Logic and Fagin‚Äôs Theorem,‚Äù
in <em>Descriptive Complexity</em>, New York, NY: Springer New York,
1999, pp. 113‚Äì124. doi: <a
href="https://doi.org/10.1007/978-1-4612-0539-5_8">10.1007/978-1-4612-0539-5_8</a>.<a
href="#fnref1" class="footnote-back" role="doc-backlink">‚Ü©Ô∏é</a></p></li>
<li id="fn2"><p>Bannach, M., Chudigiewitsch, F., &amp; Tantau, T.
(2023). Existential second-order logic over graphs: Parameterized
complexity.¬†<em>arXiv preprint arXiv:2310.01134</em>. <a
href="https://arxiv.org/abs/2310.01134">https://arxiv.org/abs/2310.01134</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">‚Ü©Ô∏é</a></p></li>
<li id="fn3"><p>J. A. Makowsky, Lecture Notes, Topic: "Lecture 3:
Disjoint unions and concatenation, Finite Automata, Regular Languages,
The B√ºchi-Elgot-Trakhtenbrot Theorem." 236331, Technion, Fall 2018. <a
href="https://janos.cs.technion.ac.il/COURSES/236331-18/Lec-3.pdf">https://janos.cs.technion.ac.il/COURSES/236331-18/Lec-3.pdf</a><a
href="#fnref3" class="footnote-back" role="doc-backlink">‚Ü©Ô∏é</a></p></li>
</ol>
</section>]]></content><author><name></name></author><summary type="html"><![CDATA[Descriptive complexity relates the realms of logic and complexity theory...]]></summary></entry><entry><title type="html">Functional programming, Lisp-like languages, and type theory</title><link href="http://localhost:4000/2022/07/26/functional-lisp.html" rel="alternate" type="text/html" title="Functional programming, Lisp-like languages, and type theory" /><published>2022-07-26T00:00:00-04:00</published><updated>2022-07-26T00:00:00-04:00</updated><id>http://localhost:4000/2022/07/26/functional-lisp</id><content type="html" xml:base="http://localhost:4000/2022/07/26/functional-lisp.html"><![CDATA[<p>I recently came across the concept of functional programming which
piqued my interest. The concept of functional programming syntactically
follows the convention as established by ‚ÄúPolish notation‚Äù; that is,
instead of putting operations between variables (eg. <math><mrow><mn>1</mn><mo>+</mo></mrow><mrow><mn>2</mn></mrow></math> to add 1
and 2), which reflects our linguistic conventions (especially in
subject-verb-object order) and the origins of mathematical expressions
from natural language grammars, we instead list the operation first and
then the variables or numbers involved, which is more logical for
computers.</p>
<p>For example, to add 1 and 2 in Scheme, we write:</p>
<div class="language-scheme highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<p>which of course evaluates to 3.</p>
<p>I found the SICP book (<em>Structure and Interpretation of Computer
Programs</em>), linked below, to give a helpful introduction to Scheme.
The book utilizes the simplicity of Scheme to teach programming
concepts. Scheme, as a prominent Lisp derivative, in general follows the
convention of prefix notation-based syntax. The parentheses seem to
indicate a sort of order of operations as you might find in a
mathematical expression, and follows a simple syntactical logic, ie. to
do <math><mrow><mo form="prefix" stretchy="false">(</mo><mn>2</mn><mo>+</mo></mrow><mrow><mn>3</mn><mo form="postfix" stretchy="false">)</mo><mspace width="0.2778em"></mspace><mo form="prefix" stretchy="false">(</mo><mn>5</mn><mo>+</mo></mrow><mrow><mn>6</mn><mo form="postfix" stretchy="false">)</mo></mrow></math>, we use:</p>
<div class="language-scheme highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">))</span>
</code></pre></div></div>
<p>Functional programming languages correspond also mathematically to
the concepts of type theory and formal languages. Agda is a programming
language which has been used in mathematical proofs. Functional
programming is also widely used in some fields such as finance.</p>
<!-- <p><code>TODO write more here</code></p> -->
<p>Resources:
<ul>
<li><a href="https://en.wikipedia.org/wiki/Polish_notation">Polish notation</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp
programming language</a></li>
<li><a href="https://staff.math.su.se/anders.mortberg/slides/master_slides.pdf">Anders
M√∂rtberg - <em>Constructive Algebra in Functional Programming and Type
Theory</em></a></li>
<li><a href="http://fmnt.info/blog/20181029_scheme.html">Scheme for scientific
computing</a></li>
<li><a href="https://beautifulracket.com/">Beautiful
Racket</a></li>
<li><a href="https://staff.math.su.se/anders.mortberg/papers/cubicalagda.pdf">Vezzozi,
M√∂rtberg, Abel - <em>Cubical Agda: A Dependently Typed Programming
Language with Univalence and Higher Inductive Types</em></a></li>
<li><a href="https://ncatlab.org/nlab/show/cubical+type+theory">Cubical type
theory</a></li>
<li><a href="https://web.mit.edu/6.001/6.037/sicp.pdf">Abelson &amp; Sussman - <em>Structure and Interpretation of Computer Programs</em></a></li>
<li><a href="https://wiki.portal.chalmers.se/agda/pmwiki.php">Agda wiki</a></li>
<li><a href="https://www.haskell.org/">Haskell</a></li>
<li><a href="https://gambitscheme.org/">Gambit Scheme</a></li>
<li><a href="https://www.gnu.org/software/mit-scheme/">MIT/GNU Scheme</a></li>
<li><a href="https://racket-lang.org/">Racket lang</a></li>
<li><a href="https://hardmath123.github.io/perchance-to-scheme.html">Perchance to Scheme</a></li>
</ul>
</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I recently came across the concept of functional programming which piqued my interest...]]></summary></entry><entry><title type="html">Regarding the quandary of the traveling salesman problem</title><link href="http://localhost:4000/2022/07/22/traveling-salesman.html" rel="alternate" type="text/html" title="Regarding the quandary of the traveling salesman problem" /><published>2022-07-22T00:00:00-04:00</published><updated>2022-07-22T00:00:00-04:00</updated><id>http://localhost:4000/2022/07/22/traveling-salesman</id><content type="html" xml:base="http://localhost:4000/2022/07/22/traveling-salesman.html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">traveling
salesman problem</a> is stated in simple terms: given an arrangement of
cities, and traveling distances between pairs of cities, what is the
shortest possible path to travel between all such cities? It appears
deceptively simple yet, from a computational standpoint, is extremely
inefficient to exhaustively solve. According to the ‚Äúnaive solution‚Äù,
the most inefficient solution, the problem is only solved by trying
every possible path between all possible sequences of cities, and then
selecting the path with the shortest total length amongst them. This
solution has expensive computational costs in the order of <math><mrow><mi>O</mi><mo form="prefix" stretchy="false">(</mo><mi>n</mi><mo form="postfix" stretchy="false">!</mo><mo form="postfix" stretchy="false">)</mo></mrow></math>.</p>
<p>Christofides algorithm was considered the most efficient
approximation until a recent <a href="https://www.quantamagazine.org/computer-scientists-break-traveling-salesperson-record-20201008/">2020
algorithm utilizing random generation was released</a>.</p>
<!-- <p>TODO continue article</p> -->]]></content><author><name></name></author><summary type="html"><![CDATA[The traveling salesman problem is stated in simple terms...]]></summary></entry><entry><title type="html">Random number generators, deterministic systems and the difficulty of modeling stochasticity</title><link href="http://localhost:4000/2022/04/13/rng-thoughts.html" rel="alternate" type="text/html" title="Random number generators, deterministic systems and the difficulty of modeling stochasticity" /><published>2022-04-13T00:00:00-04:00</published><updated>2022-04-13T00:00:00-04:00</updated><id>http://localhost:4000/2022/04/13/rng-thoughts</id><content type="html" xml:base="http://localhost:4000/2022/04/13/rng-thoughts.html"><![CDATA[<p>When using the R language I decided to look up the documentation of
the <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Random"><code>Random</code></a>
function which actually seems to be quite interesting. This
<code>Random</code> function in the R <code>base</code> library offers
several different pseudorandom number generators: the <a href="https://en.wikipedia.org/wiki/Wichmann%E2%80%93Hill">Wichmann-Hill</a>,
<a href="https://en.wikipedia.org/wiki/Multiply-with-carry_pseudorandom_number_generator">Marsaglia-Multicarry</a>,
Super Duper, <a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne-Twister</a>,
<a href="https://www-cs-faculty.stanford.edu/~knuth/news02.html">Knuth-TAOCP-2002</a>,
Knuth-TAOCP, and <a href="https://pubsonline.informs.org/doi/abs/10.1287/opre.47.1.159">L‚ÄôEcuyer-CMRG</a>.</p>
<p><a href="https://coolbutuseless.github.io/2020/07/07/the-quality-of-rs-random-number-generators/">Another
blog</a> I found has summarized the apparent performance advantages and
disadvantages of each of these random number generators (RNGs) so I will
link it here. The data in the post is taken from <a href="https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf">L‚ÄôEcuyer
and Simard, 2007</a>.</p>
<p>Firstly some overall philosophical notes about the nature of
computers as deterministic state machines. It is interesting that such
machines require algorithms such as these to even attempt to simulate
stochastic behavior! One thinks of human beings as the opposite of
computers: it is easier for us to be ‚Äústochastic‚Äù and it is hard for us
to be reliably ‚Äúdeterministic‚Äù and implement (for most people) complex
algorithms mentally in an efficient manner. In contrast, a computer in
the macro sense can only have a certain amount of states, such that we
can consider each possible arrangement of bytes at a given moment in CPU
registers, in main memory, in storage etc, to be a finite (though large)
number of possible states. That is, (classical) computers suffer a
discreteness limitation, as their fundamental operation requires this in
accordance with their theoretical model of binary logic, as well as the
practical implementation of this.</p>
<p>One notes that (pseudo) RNGs tend to utilize certain ‚Äúseeds‚Äù or
certain input values to be fed into RNG algorithms to produce a given
pseudorandom number. This tends to be something such as the timestamp
(which can reliably be said to different between every usage) although
this does not prevent certain problems. Some <a href="https://scicomp.stackexchange.com/questions/30479/how-good-are-current-implementations-of-rand-in-c">criticisms</a>
have been noted for example of the default <code>rand()</code> function
in many C implementations such as that in <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/rand.c;h=9c90e77af5d797894a1c50f1bb84c136dc5deb80;hb=HEAD">glibc</a>.
The implementation in <a href="https://git.musl-libc.org/cgit/musl/tree/src/prng/rand.c">musl</a>
is quite simple:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">uint64_t</span> <span class="n">seed</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">srand</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">seed</span> <span class="o">=</span> <span class="n">s</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">rand</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">seed</span> <span class="o">=</span> <span class="mi">6364136223846793005ULL</span><span class="o">*</span><span class="n">seed</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">seed</span><span class="o">&gt;&gt;</span><span class="mi">33</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The method utlized by musl appears to be a <a href="https://en.wikipedia.org/wiki/Linear_congruential_generator#:~:text=264-,6364136223846793005,-1">linear
congruential generator</a>, whereas the reference implementation is by
Knuth. It is noted that LCGs are <a href="https://crypto.stackexchange.com/questions/60543/how-are-linear-congruential-generator-multipliers-chosen">not
sufficiently secure for ‚Äúcryptographic applications‚Äù</a>. The algorithm
follows the <a href="https://www.eg.bucknell.edu/~xmeng/Course/CS6337/Note/master/node40.html">formula</a>:</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo stretchy="true" form="prefix">(</mo><mi>a</mi><msub><mi>X</mi><mi>i</mi></msub><mo>+</mo><mi>c</mi><mo stretchy="true" form="postfix">)</mo></mrow><mrow><mspace width="0.444em"></mspace><mo>mod</mo><mspace width="0.222em"></mspace><mi>m</mi></mrow><mo>,</mo><mi>i</mi><mo>=</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mi>.</mi><mi>.</mi><mi>.</mi></mrow><annotation encoding="application/x-tex">X_{i+1} = (aX_i + c) \mod m, i=0,1,2,...</annotation></semantics></math></p>
<p>Here <em>a</em> is the constant multiplier, <em>c</em> is the
increment, <em>m</em> is the modulus, hence in the above musl
implementation, the multiplier is 6364136223846793005, the increment is
1, and the modulus is 2<sup>64</sup>.</p>
<p>The glibc <code>random()</code> code is interesting because it
provides <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random.c#l59">very
extensive comments</a>. The code comments note:
<blockquote>In addition to the
standard <code>rand()</code>/<code>srand()</code> like interface, this
package also has a special state info interface. The
<code>initstate()</code> routine is called with a seed, an array of
bytes, and a count of how many bytes are being passed in; this array is
then initialized to contain information for random number generation
with that much state information. Good sizes for the amount of state
information are 32, 64, 128, and 256 bytes. The state can be switched by
calling the <code>setstate()</code> function with the same array as was
initialized with <code>initstate()</code>. By default, the package runs
with 128 bytes of state information and generates far better random
numbers than a linear congruential generator. If the amount of state
information is less than 32 bytes, a simple linear congruential R.N.G.
is used.</blockquote></p>
<p>What method is utilized instead of a linear congruential RNG?
<blockquote>The random number generation technique is a linear feedback shift
register approach, employing trinomials (since there are fewer terms to
sum up that way).</blockquote></p>
<p>The man page states: 
<blockquote>The <code>random()</code> function uses a
nonlinear additive feedback random number generator employing a default
table of size 31 long integers to return successive pseudo-random
numbers in the range from 0 to <code>RAND_MAX</code>. The period of this
random number generator is very large, approximately 16 * ((2^31) -
1).</blockquote></p>
<p><a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random.c#l146">In
the code</a> we observe the table:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int32_t</span> <span class="n">randtbl</span><span class="p">[</span><span class="n">DEG_3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span>
  <span class="p">{</span>
    <span class="n">TYPE_3</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">1726662223</span><span class="p">,</span> <span class="mi">379960547</span><span class="p">,</span> <span class="mi">1735697613</span><span class="p">,</span> <span class="mi">1040273694</span><span class="p">,</span> <span class="mi">1313901226</span><span class="p">,</span>
    <span class="mi">1627687941</span><span class="p">,</span> <span class="o">-</span><span class="mi">179304937</span><span class="p">,</span> <span class="o">-</span><span class="mi">2073333483</span><span class="p">,</span> <span class="mi">1780058412</span><span class="p">,</span> <span class="o">-</span><span class="mi">1989503057</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">615974602</span><span class="p">,</span> <span class="mi">344556628</span><span class="p">,</span> <span class="mi">939512070</span><span class="p">,</span> <span class="o">-</span><span class="mi">1249116260</span><span class="p">,</span> <span class="mi">1507946756</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">812545463</span><span class="p">,</span> <span class="mi">154635395</span><span class="p">,</span> <span class="mi">1388815473</span><span class="p">,</span> <span class="o">-</span><span class="mi">1926676823</span><span class="p">,</span> <span class="mi">525320961</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">1009028674</span><span class="p">,</span> <span class="mi">968117788</span><span class="p">,</span> <span class="o">-</span><span class="mi">123449607</span><span class="p">,</span> <span class="mi">1284210865</span><span class="p">,</span> <span class="mi">435012392</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">2017506339</span><span class="p">,</span> <span class="o">-</span><span class="mi">911064859</span><span class="p">,</span> <span class="o">-</span><span class="mi">370259173</span><span class="p">,</span> <span class="mi">1132637927</span><span class="p">,</span> <span class="mi">1398500161</span><span class="p">,</span>
    <span class="o">-</span><span class="mi">205601318</span><span class="p">,</span>
  <span class="p">};</span>
</code></pre></div></div>
<p>Which such trinomials are utilized? <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random.c#l94">The
code</a> details 4 types of RNGs, with <code>TYPE_0</code> being the
simple linear congruential method, the others being trinomials:
<code>TYPE_1</code>
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>7</mn></msup><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^7 + x^3 + 1</annotation></semantics></math>,
<code>TYPE_2</code>
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>15</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^15 + x + 1</annotation></semantics></math>,
and <code>TYPE_3</code>
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>31</mn></msup><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^31 + x^3 + 1</annotation></semantics></math>.
These three trinomial equations intersect at the points (0,1), (1,3) and
(-1,-1), while additional intersections exist between the pairs at
non-integer points:</p>
<p><img src="/assets/2022/04/desmos-graph.png" alt="plot_trinomials" width="50%" /></p>
<p>These trinomials are important enough that <a href="https://www.unf.edu/~cwinton/html/cop4300/s09/class.notes/c1-VLP-RNGs.pdf">lists
have been published of them</a> and they have been subject of study.</p>
<p>The <a href="https://www.redhat.com/en/blog/understanding-random-number-generators-and-their-limitations-linux">method
utilized by glibc</a> in <code>random_r()</code> involves the <a href="https://github.com/lattera/glibc/blob/master/stdlib/random_r.c#L364">formula</a>:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int32_t</span> <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">1103515245U</span><span class="p">)</span> <span class="o">+</span> <span class="mi">12345U</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7fffffff</span><span class="p">;</span>
</code></pre></div></div>
<p>In the GNU man page is detailed the differences between
<code>random()</code> and <code>random_r()</code>:
<blockquote>The <code>random_r()</code> function is like <code>random(3)</code>, except
that instead of using state information maintained in a global variable,
it uses the state information in the argument pointed to by buf, which
must have been previously initialized by <code>initstate_r()</code>. The
generated random number is returned in the argument result.</blockquote></p>
<p>A <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">linear
feedback shift register</a> utilizes ‚Äúa <a href="https://en.wikipedia.org/wiki/Linearity#Boolean_functions">linear
function</a> of its previous state‚Äù as the input bit.</p>
<p>Another set of random number generators in UNIX and UNIX-like systems
(such as macOS, BSD, Linux) occurs in the exposed
<code>/dev/random</code> and <code>/dev/urandom</code> ‚Äúfiles‚Äù. Under
the UNIX paradigm ‚Äúeverything is a file‚Äù so these ‚Äúfiles‚Äù can be handled
by utilities such as <code>cat</code> as if they were files, allowing
pipelining to files etc. These produce continuous streams of random
bytes which are considered <a href="https://en.wikipedia.org/wiki//dev/random#Linux">‚Äúcryptographically
secure‚Äù</a>.</p>
<p>Let‚Äôs examine the randomness tests contained within the TestU01 suite
proposed by <a href="https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf">L‚ÄôEcuyer
and Simard, 2007</a>. They first define a ‚Äúgood imitation‚Äù of
‚Äúindependent uniform random variables‚Äù (colloquially, what we would
presumably consider ‚Äútruly random‚Äù): <blockquote>RNGs for all types of
applications are designed so that their output sequence is a good
imitation of a sequence of independent uniform random variables, usually
over the real interval
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="true" form="prefix">(</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><annotation encoding="application/x-tex">(0, 1)</annotation></semantics></math>
or over the binary set
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false" form="prefix">{</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="false" form="postfix">}</mo></mrow><annotation encoding="application/x-tex">\{0, 1\}</annotation></semantics></math>.
In the first case, the relevant hypothesis
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msubsup><mi>H</mi><mn>0</mn><mi>A</mi></msubsup><annotation encoding="application/x-tex">H_0^A</annotation></semantics></math>
to be tested is that the successive output values of the RNG, say
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mn>0</mn></msub><mo>,</mo><msub><mi>u</mi><mn>1</mn></msub><mo>,</mo><msub><mi>u</mi><mn>2</mn></msub><mo>,</mo><mi>.</mi><mi>.</mi><mi>.</mi></mrow><annotation encoding="application/x-tex">u_0 , u_1 , u_2 , . . .</annotation></semantics></math>,
are independent random variables from the uniform distribution over the
interval
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="true" form="prefix">(</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><annotation encoding="application/x-tex">(0, 1)</annotation></semantics></math>,
that is, i.i.d.
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">U (0, 1)</annotation></semantics></math>.
In the second case,
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msubsup><mi>H</mi><mn>0</mn><mi>B</mi></msubsup><annotation encoding="application/x-tex">H_0^B</annotation></semantics></math>
says that we have a sequence of independent random bits, each taking the
value 0 or 1 with equal probabilities independently of the others.</blockquote></p>
<p>The paper discusses many methods of testing (implemented in their
testing suite), a few are given below:</p>
<ol type="1">
<li><p><em>Statistical two-level statistical test</em>
<blockquote>Several
authors have advocated and/or applied a two-level (or second-order)
procedure for testing RNGs [Fishman 1996; Knuth 1998; L‚ÄôEcuyer 1992;
Marsaglia 1985]. The idea is to generate N ‚Äúindependent‚Äù copies of Y ,
say
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mo>,</mo><mi>.</mi><mi>.</mi><mi>.</mi><mo>,</mo><msub><mi>Y</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">Y_1 , . . . , Y_N</annotation></semantics></math>,
by replicating the first-order test N times on disjoint subsequences of
the generator‚Äôs output. Let F be the theoretical distribution function
of Y under
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>H</mi><mn>0</mn></msub><annotation encoding="application/x-tex">H_0</annotation></semantics></math>.
If F is continuous, the transformed observations
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub><mo>=</mo><mi>F</mi><mrow><mo stretchy="true" form="prefix">(</mo><msub><mi>Y</mi><mn>1</mn></msub><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">U_1 = F (Y_1)</annotation></semantics></math>,
. . . ,
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>N</mi></msub><mo>=</mo><mi>F</mi><mrow><mo stretchy="true" form="prefix">(</mo><msub><mi>Y</mi><mi>N</mi></msub><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">U_N = F (Y_N )</annotation></semantics></math>
are i.i.d.
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mrow><mo stretchy="true" form="prefix">(</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow></mrow><annotation encoding="application/x-tex">U (0, 1)</annotation></semantics></math>
random variables under
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>H</mi><mn>0</mn></msub><annotation encoding="application/x-tex">H_0</annotation></semantics></math>
. One way of performing the two-level test is to compare the empirical
distribution of these
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>U</mi><mi>j</mi></msub><annotation encoding="application/x-tex">U_j</annotation></semantics></math>
‚Äôs to the uniform distribution, via a goodness-of-fit (GOF) test such as
those of Kolmogorov- Smirnov, Anderson-Darling, CraÃÅmer-von Mises, etc.
<br /> [‚Ä¶] <br /> The p-value of the GOF test statistic is computed and
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msub><mi>H</mi><mn>0</mn></msub><annotation encoding="application/x-tex">H_0</annotation></semantics></math>
is rejected if this p-value is deemed too extreme, as usual.</blockquote></p></li>
<li><p><em>Testing a stream of real numbers</em>, this involves
‚Äúmeasuring global uniformity‚Äù, ‚Äúmeasuring clustering‚Äù (if the numbers
tend to be clustered in a certain manner), and ‚Äúrun and gap tests‚Äù
(counts gap between successive values that land in a certain interval,
using the heuristic of Lebesgue measure).</p></li>
<li><p><em>‚ÄúTesting for n subsequences of length t‚Äù</em></p></li>
<!-- <li><p>*Testing for</p></li> -->
</ol>
<p><a href="https://arxiv.org/abs/1805.01407">Blackman and Vigna,
2018</a> discuss some of the weaknesses of ‚ÄúF<sub>2</sub>-linear
pseudorandom number generators‚Äù. They propose a new generator called <a href="https://prng.di.unimi.it/">xoshiro256**</a> which supposedly
addresses the failures of previous RNGs including their own Xoshiro128+.
This in turn was criticized by <a href="https://www.pcg-random.org/posts/a-quick-look-at-xoshiro256.html">O‚ÄôNeill,
2018</a>, where she compares it to her own <a href="https://www.pcg-random.org/paper.html">PCG</a> random number
generator algorithms.</p>
<!-- <p>work in progress to be continued-</p>
<p>salt</p> -->]]></content><author><name></name></author><summary type="html"><![CDATA[When using the R language I decided to look up the documentation of the Random function which actually seems to be quite interesting...]]></summary></entry><entry><title type="html">Setting up a virtual machine on Apple Silicon ‚ÄúM1‚Äù Macs using UTM</title><link href="http://localhost:4000/2022/01/20/apple-silicon-vm-in-utm.html" rel="alternate" type="text/html" title="Setting up a virtual machine on Apple Silicon ‚ÄúM1‚Äù Macs using UTM" /><published>2022-01-20T00:00:00-05:00</published><updated>2022-01-20T00:00:00-05:00</updated><id>http://localhost:4000/2022/01/20/apple-silicon-vm-in-utm</id><content type="html" xml:base="http://localhost:4000/2022/01/20/apple-silicon-vm-in-utm.html"><![CDATA[<p>Recently I had to use an Ubuntu virtual machine (VM) for a course.
However, the recommended method, using Oracle‚Äôs <a href="https://www.virtualbox.org">VirtualBox</a> software, was not (at
the time of this writing) supported for the ARM architecture
(arm64/aarch64) which my M1 Mac laptop utilized. Therefore I had to find
another way run a virtual machine, or I could give up and try to use an
x86/amd64 computer (commonly known as an ‚ÄòIntel‚Äô architecture computer).
I decided to use the open source software, <a href="https://github.com/utmapp/UTM">UTM</a>. UTM is a GUI application
which runs <a href="https://www.qemu.org">QEMU</a> underneath, albeit
with settings preconfigured to work with Mac computers.</p>
<p>I ended up referencing several guides before successfully being able
to install the software. I decided to use the (as of this writing) beta
version of the software, version <a href="https://github.com/utmapp/UTM/releases/tag/v3.0.3">3.0.3</a>,
since the 3.X versions have incorporated a setup wizard that makes setup
much easier. I ended up downloading the live server ISO file from the <a href="https://ubuntu.com/download/server/arm">Ubuntu Server for ARM
webpage</a>, specifically, I ended up happening to use the long-term
support (LTS) version <a href="https://cdimage.ubuntu.com/releases/20.04/release/ubuntu-20.04.3-live-server-arm64.iso">Focal
Fossa (20.4)</a>.</p>
<p>The next step was to configure the wizard, which was actually quite
straightforward. After opening UTM, one simply presses ‚ÄúCreate a new
Virtual Machine‚Äù, then in this case, choosing ‚ÄúVirtualize‚Äù for the next
step, then choosing ‚ÄúLinux‚Äù under the operating system section. Then,
using the default virtualization (QEMU instead of Apple Virtualization),
it is enough to then simply select the ‚ÄúBoot ISO image‚Äù by clicking
‚ÄúBrowse‚Äù and selecting the downloaded ISO file. The following pages
allow for configuring RAM, CPU, and maximum size of the drive (since
this uses the qcow2 format, it will not actually use the full size at
the beginning, rather, this sets an upper limit to the storage usage of
the virtual machine). Pressing next to step through these options, we
can pick a name for the installation and click ‚ÄúSave‚Äù.</p>
<!-- ![select VM](http://localhost:4000/assets/2022/01/selectVM.png){: width="250" } ![select Virtualize](http://localhost:4000/assets/2022/01/selectVirtualize.png){: width="250" } ![select Linux](http://localhost:4000/assets/2022/01/selectLinux.png){: width="250" } ![choose ISO](http://localhost:4000/assets/2022/01/utmBootISO.png){: width="250" } ![chosen ISO](http://localhost:4000/assets/2022/01/utmBootISO2.png){: width="250" } ![UTM summary](http://localhost:4000/assets/2022/01/utmSummary.png){: width="250" }  -->
<figure>
<img src="/assets/2022/01/utmSetup.gif" alt="UTM setup" />
<figcaption aria-hidden="true">UTM setup</figcaption>
</figure>
<p>After this, the virtual machine can be booted from the sidebar in UTM
(click in the taskbar ‚ÄúView‚Äù and ‚ÄúToggle Sidebar‚Äù if you do not see it).
Upon booting, choose the first install option in GRUB, (press
<kbd>Enter</kbd> for ‚ÄúInstall Ubuntu Server‚Äù). Choose a language,
keyboard layout, network connection (you can probably leave this default
and simply click next), proxy (can leave this blank as well), archive
mirror (you can leave the default or <a href="https://launchpad.net/ubuntu/+archivemirrors">pick one near to
you</a> for faster speeds). Go through the settings, pick a Name,
Username, Hostname, and install.</p>
<figure>
<img src="/assets/2022/01/installUbuntu.png" alt="Install Ubuntu" />
<figcaption aria-hidden="true">Install Ubuntu</figcaption>
</figure>
<p>Next, after exiting the installer and rebooting, you might notice
that the UTM virtual machine is unable to boot (as of the 3.0.3 beta).
Here you need to right click the VM and press ‚ÄúEdit‚Äù, look at the
section titled ‚ÄúDrives‚Äù on the left-hand side, select the ‚ÄúUSB Drive‚Äù,
and press ‚ÄúMove down‚Äù to move it to a lower boot priority.</p>
<!-- ![UTM USB](http://localhost:4000/assets/2022/01/utmUSB.png){: width="300" }  ![UTM USB2](http://localhost:4000/assets/2022/01/utmUSB2.png){: width="300" }  -->
<figure>
<img src="/assets/2022/01/utmUsbDrive.gif" alt="UTM USB" />
<figcaption aria-hidden="true">UTM USB</figcaption>
</figure>
<p>Now, when you try to boot the VM, you should be presented with a
console. You can login and use the operating system!</p>
<!-- ![Ubuntu TTY](http://localhost:4000/assets/2022/01/ubuntuTTY.png) -->
<figure>
<img src="/assets/2022/01/ubuntuNeofetch.png" alt="Ubuntu Neofetch" />
<figcaption aria-hidden="true">Ubuntu Neofetch</figcaption>
</figure>
<p>Finally, perhaps you do not want to simply use everything in the
terminal and you want to use a graphical user interface (GUI) desktop as
you are accustomed to using. You can run
<code>sudo apt install ubuntu-desktop</code> (or use another desktop, <a href="https://itsfoss.com/install-gui-ubuntu-server/">see here</a>).
Then run <code>sudo apt install lightdm</code> to install the LightDM
display manager (if you are not sure what this is, just know that a
display manager is needed to use the GUI). Finally, run
<code>sudo services lightdm start</code> to start the GUI. You will be
presented with a colorful login page where you can enter your password
and enjoy the desktop!</p>
<figure>
<img src="/assets/2022/01/ubuntuDesktop.png" alt="Ubuntu Desktop" />
<figcaption aria-hidden="true">Ubuntu Desktop</figcaption>
</figure>
<p>You can enable optionally a feature to be able to share files between
your virtual machine and your host operating system. You again want to
right click and ‚ÄúEdit‚Äù the settings for the virtual machine (after it is
shut down). Press ‚ÄúSharing‚Äù and then check ‚ÄúEnable Directory Sharing‚Äù.
Now, boot Ubuntu, open a terminal (terminal app if you installed the
GUI, otherwise you are already in the terminal), type
<code>sudo apt install spice-vdagent spice-webdavd</code> to <a href="https://mac.getutm.app/support/">install</a> the SPICE guest tools
package which will allow sharing files.</p>
<figure>
<img src="/assets/2022/01/utmSharing.png" alt="SPICE tools" />
<figcaption aria-hidden="true">SPICE tools</figcaption>
</figure>
<p>More links for further information: 
<ul>
<li><a href="https://mac.getutm.app/gallery/ubuntu-20-04">Ubuntu 20.04 -
UTM</a></li>
<li><a href="https://itsfoss.com/install-gui-ubuntu-server/">How
to Install GUI on Ubuntu Server [Beginner‚Äôs Guide]</a></li>
<li><a href="https://medium.com/@lizrice/linux-vms-on-an-m1-based-mac-with-vscode-and-utm-d73e7cb06133">Linux
VMs on an M1-based Mac with VScode and UTM</a></li>
<li><a href="https://developer.apple.com/documentation/virtualization/running_linux_in_a_virtual_machine">Running
Linux in a Virtual Machine | Apple Developer Documentation</a></li>
</ul>
</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Recently I had to use an Ubuntu virtual machine (VM) for a course. However, the recommended method, using Oracle's VirtualBox software, was not (at the time of this writing) supported for the ARM architecture (arm64/aarch64) which my M1 Mac laptop utilized...]]></summary></entry><entry><title type="html">A journey into basic hardware design with an Arduino Uno R3</title><link href="http://localhost:4000/2021/12/21/arduinouno.html" rel="alternate" type="text/html" title="A journey into basic hardware design with an Arduino Uno R3" /><published>2021-12-21T00:00:00-05:00</published><updated>2021-12-21T00:00:00-05:00</updated><id>http://localhost:4000/2021/12/21/arduinouno</id><content type="html" xml:base="http://localhost:4000/2021/12/21/arduinouno.html"><![CDATA[<p>I recently decided to obtain an <a href="https://store-usa.arduino.cc/products/arduino-uno-rev3/">Arduino
Uno R3</a>, which, if we are to trust its online reputation, is supposed
to be a promising platform for prototyping hardware development. The
device came in a starter kit box with some other provided components
such as resistors, a breadboard, a USB cable, LCD display, wires, LEDs,
a tri-state 8-bit shift register, and a variety of sensors. It is fair
to say that the kit promised a decent variety of components for a
beginner to dive into Arduino <a href="https://www.arduino.cc/en/uploads/Main/Arduino_Uno_Rev3-schematic.pdf">hardware</a>
experimentation.</p>
<p><img src="https://cdn.sparkfun.com//assets/parts/6/3/4/3/11021-01.jpg" alt="Arduino Uno R3" width="150" /></p>
<p>Having obtained the hardware, the next step was to set up a
development environment. The <a href="https://www.arduino.cc/en/software">Arduino website</a> provided
two options for my computer: I could use the Arduino IDE, or use the
Arduino command-line utility (<code>arduino-cli</code>). In theory,
everything that could be done in the official IDE could be done using
the command-line utility. I counterintuitively decided to try using the
command-line utility first. I was able to download it for macOS using
Homebrew (<code>brew install arduino-cli</code>). Then, I decided to use
VS Code to install the official <a href="https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino">Arduino
extension</a> made by Microsoft.</p>
<p>The extension did not work with <code>arduino-cli</code> out the box.
It did not immediately detect the plugged in device (although it was
detected by running <code>arduino-cli board list</code> in the shell).
Several settings had to be set to allow the device to work:
<code>"arduino.commandPath": "arduino-cli", "arduino.enableUSBDetection": true, "arduino.useArduinoCli": true, "arduino.path": "/opt/homebrew/bin/"</code>.</p>
<p>To make a project, the next step was to run
<code>arduino-cli new BareMinimum</code> in the shell, where
<code>BareMinimum</code> was my project title. This also works if you
manually make a folder and then make a file called
<code>BareMinimum.ino</code> within it. Within it you can put at a
minimum the <a href="https://www.arduino.cc/en/Tutorial/BuiltInExamples/BareMinimum">following
code</a>:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>

<span class="p">}</span>

<span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your main code here, to run repeatedly:</span>

<span class="p">}</span>
</code></pre></div></div>
<p>After saving the code the next step was to ensure the interface with
the actual Uno device. First I could run
<code>arduino-cli board list</code> to identify the FQBN (fully
qualified board name) for my board. The next step was to search for
available ‚Äòcores‚Äô that would work with the board. The next step was to
run <code>arduino-cli board listall uno</code>. Following that I ran
<code>arduino-cli core install arduino:avr</code>. I could now compile
by running
<code>arduino-cli compile --fqbn arduino:avr:uno BareMinimum</code> and
then I could upload with
<code>arduino-cli upload -p /dev/location --fqbn arduino:avr:uno BareMinimum</code>
where <code>/dev/location/</code> would be subsituted by the appropriate
<code>/dev</code> entry copied from the output of
<code>arduino-cli board list</code>.</p>
<p>After doing all this‚Ä¶ the code was uploaded! Nothing of significance
happened other than the light from the default LED remaining on.
However, by creating <a href="https://create.arduino.cc/projecthub/B45i/getting-started-with-arduino-cli-7652a5">another
project</a> it would be possible to observe a blinking effect.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Later I was also able to use the VS Code extension and its <a href="https://maker.pro/arduino/tutorial/how-to-use-visual-studio-code-for-arduino">board
configuration settings</a> to upload code from the IDE directly.</p>
<p>As you might notice from the example code, the Arduino language is a
customized dialect of C++.</p>
<p>Following <a href="https://www.circuitbasics.com/arduino-7-segment-display-tutorial/">another
guide</a> it was possible to proceed to the next step. The next step was
to try to use this board with some other hardware! I was able to use a
basic LED:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">setup</span><span class="p">(){</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">loop</span><span class="p">(){</span> 
<span class="p">}</span>
</code></pre></div></div>
<p>This was wired as follows (refer to the <a href="https://www.circuitbasics.com/arduino-7-segment-display-tutorial/">original
link</a> for more details), using a 1K Œ© resistor:</p>
<p><img src="https://www.circuitbasics.com/wp-content/uploads/2017/05/Arduino-7-Segment-Display-Tutorial-Cathode-to-GPIO.png" alt="single-LED" width="250" /></p>
<p>I also found it helpful to check resistor values using an <a href="https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-resistor-color-code">online
resistor calculator</a>. Resistance values in ohms are typically
indicated by colored bands which correspond to certain values. It is
important to note which side you begin reading the bands from, since you
could obtain different values. An <a href="https://www.arrow.com/en/research-and-events/articles/resistor-color-code">online
source</a> suggested reading from the side with grouped bands (never
from the side with a metallic band). The resistor here plays the role of
limiting current (as we know from the elementary formulation of Ohm‚Äôs
Law, <em>I = V/R</em>) and therefore a higher resistance could be used
to limit further the intensity/brightness of the LED. It is important to
use resistors in electronics to protect against excessive current from
damaging more sensitive components.</p>
<p>Another interesting feature of this simple circuit is to note that
the LEDs used (any LEDs in fact) exhibit a characteristic <a href="https://www.switchelectronics.co.uk/blog/post/ledpolarity.html">polarity</a>,
that is, current can only flow in one direction and thus the LED must be
wired accordingly. LEDs, or light-emitting diodes, like other <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/diod.html">diodes</a>
operate due to a <a href="https://en.wikipedia.org/wiki/P%E2%80%93n_junction">p-n
junction</a> which is possible due to the use of semiconductors and
impurities which ‚Äòbias‚Äô the current to only flow, for the most part, in
one direction. As can be noted on the above image, the 5 volts are on
the side of the the anode (+) side of the LED, also wired in series with
the resistor. The cathode (-) side is connected to pin 7, which has a
‚ÄòLOW OUTPUT‚Äô set by our code, which in according to the <a href="https://www.arduino.cc/reference/en/language/variables/constants/constants/">code
documentation</a> actually sets the pin to 0 volts. In theory, our setup
would be similar to <a href="https://learn.sparkfun.com/tutorials/light-emitting-diodes-leds/all">doing
this</a>:</p>
<p><img src="https://cdn.sparkfun.com/assets/6/e/8/3/c/51f93d85757b7f2049270817.png" alt="circuit_cartoon" width="250" /></p>
<p>Or, if we were to follow the standard circuitry schematic, it would
be <a href="https://circuitdigest.com/electronic-circuits/simplle-led-circuit-diagram">similar
to this</a>
<!--(http://www.electronicshobbyprojects.com/basic-circuits/simplest-led-circuit.html)-->
(albeit with different numerical values for voltage and resistance
etc):</p>
<p><img src="https://circuitdigest.com/sites/default/files/circuitdiagram/simple-led-ckt_0.png" alt="LED_circuitDiagram" width="250" /></p>
<p>Nominally/conventionally, ‚Äòcurrent‚Äô flows from positive to negative,
that is, from our anode side to our cathode side (in actuality it is
more like the electrons ‚Äòflow‚Äô from the negative to the positive side).
Our current works out to be a little less than 5V/1000Œ© = 5mA (unknown
resistance of the LED itself).</p>
<p>It is also important to note the way that breadboards are wired.
Supposedly, breadboards are named as such due to the <a href="https://en.wikipedia.org/wiki/Breadboard#Evolution">historic usage
of actual bread cutting boards for prototyping circuits</a>. The wiring
pattern of breadboards follows <a href="https://www.sciencebuddies.org/science-fair-projects/references/how-to-use-a-breadboard">this
pattern</a>, where each slot within a rows is connected to the others in
the row (not going through the middle however), as are each slot in a
side column:
<!-- (http://wiring.org.co/learning/tutorials/breadboard/): --></p>
<!-- ![breadboard](http://wiring.org.co/learning/tutorials/breadboard/imgs/breadboard-02.jpg){: width="400"} -->
<p><img src="https://www.sciencebuddies.org/Files/7326/6/breadboard-row-connections.png" alt="breadboardwiring" width="300" /></p>
<p>This was just a very elementary demonstration of how circuitry could
be incorporated with hardware and software, and our humble <a href="https://www.microchip.com/en-us/product/ATmega328P">ATMega328P
microcontroller</a> is sufficient to work with this circuitry!</p>
<hr />

<p>Note: the code snippets in this page come from the linked pages,
please refer to linked pages for source information and images as well
as further details.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I recently decided to obtain an Arduino Uno R3...]]></summary></entry></feed>